# vim: set filetype=yaml expandtab tabstop=2 shiftwidth=2 softtabstop=2 background=dark :

- name: select proper PAF package (centos7)
  set_fact:
    paf_pkg: 'resource-agents-paf-{{ postgres_ha_paf_version }}-1.noarch.rpm'
  when: (os_version == 'centos7' or os_version == 'centos8')

- name: select proper PAF package (centos6)
  set_fact:
    paf_pkg: 'resource-agents-paf-1.1.0-1.noarch.rpm'
  when: os_version == 'centos6'

# this rpm is also available on github.. but when multiple servers start to download 
# the same file from github simultanneously, github will likely block you
# and the role will fail
# that's why it's embedded in the role

- name: copy PAF rpm to hosts
  copy: src="{{ paf_pkg }}" dest="/tmp/{{ paf_pkg }}"

- name: install PAF DB failover agent
  yum:
    name: "/tmp/{{ paf_pkg }}"
    state: present
    disable_gpg_check: True

- name: apply PAF v2.2.0 fix for newest pacemaker
  copy:
    src: 'pgsqlms-2.2.0-fix-pg10'
    dest: '/usr/lib/ocf/resource.d/heartbeat/pgsqlms'
  args:
    owner: root
    group: root
    mode:  0555
  when: postgres_ha_paf_version == '2.2.0' and
        not postgres_ha_paf_geo_patch

- name: apply geo-HA patches to DB failover agent
  copy:
    src: 'pgsqlms-{{ postgres_ha_paf_version }}-geo-patched'
    dest: '/usr/lib/ocf/resource.d/heartbeat/pgsqlms'
  args:
    owner: root
    group: root
    mode:  0555
  when: postgres_ha_paf_geo_patch

- name: prepare DB recovery.conf
  template: src=recovery.conf.pcmk.j2 dest="{{ postgres_ha_pg_data }}/../recovery.conf.{{postgres_ha_cluster_name}}.pcmk"
  args:
    owner: postgres
    group: postgres
    mode:  0644
  when: postgres_ha_pg_version | int < 12

- name: stop database for clustering
  service: name="{{ postgres_ha_pg_systemd_svcname }}" state=stopped enabled=false

# 'force_resource_update' is commented out because it might trigger database restart after role re-run
- name: create database cluster resource
  when: inventory_hostname == postgres_ha_cluster_master_host    # run only on one node
  pcs_resource:
    name: "{{ postgres_ha_cluster_pg_HA_res_name }}"    # master resource name
    child_name: "{{ postgres_ha_cluster_pg_res_name }}" #  slave resource name
    resource_class: '{% if ansible_distribution_major_version | int >= 8 %}promotable{% else %}master{% endif %}'
    resource_type: ocf:heartbeat:pgsqlms
    #force_resource_update: true
    options: >
      {% if db_resource_exists is not succeeded %}--disabled{% endif %}
      bindir="{{ postgres_ha_pg_bindir }}"
      pgdata="{{ postgres_ha_pg_data }}"
      pgport="{{ postgres_ha_pg_port }}"
      {% if postgres_ha_pg_version | int < 12 %}
      recovery_template="{{ postgres_ha_pg_data }}/../recovery.conf.{{postgres_ha_cluster_name}}.pcmk"
      {% endif %}
      '{% if ansible_distribution_major_version | int >= 8 %}promotable{% else %}master{% endif %}'
      master-max=1
      master-node-max=1
      clone-max="{{ ansible_play_batch|length }}"
      clone-node-max=1
      notify=true
      op start timeout=60s
      op stop timeout=60s
      op promote timeout=30s
      op demote timeout=120s
      op notify timeout=60s
      op monitor interval="{{ postgres_ha_monitor_interval_pgmaster }}" timeout=10s role="Master"
      op monitor interval="{{ postgres_ha_monitor_interval_pgslave }}"  timeout=10s role="Slave"

